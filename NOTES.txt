////////////////////////////////////////////////////////////////////////////////
// This document contains course notes for the course:
// "Atari 2600 Programming with 6502 Assembly" by Gustavo Pezzi
// https://pikuma.com/courses/learn-assembly-language-programming-atari-2600-games
////////////////////////////////////////////////////////////////////////////////

 SECTIONS:
   #1: COURSE OVERVIEW
   #2: NOTES
   #3: 6502 INSTRUCTIONS (OPCODES)



  #1 | COURSE OVERVIEW:
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

   [X]  #1: Introduction
   [X]  #2: Hardware and Architecture
   [X]  #3: 6502 Assembly Programming
   [X]  #4: 6502 Instruction Set
   [X]  #5: VCS Memory Map and the TIA
   [X]  #6: Screen Objects
   [X]  #7: Vertical and Horizontal Positioning
   [-]  #8: CPU Instructions and Clock Cycles
   [-]  #9: Controller Input
   [-] #10: Subroutines, Stack, and Pointers
   [-] #11: Defining our Final Project
   [-] #12: Controlling Position and Movement
   [-] #13: Random Numbers
   [-] #14: Object Collision
   [-] #15: Digits and Scoreboard
   [-] #16: Missiles
   [-] #17: Audio
   [-] #18: Scanline Analasis and Debugging Tools
   [-] #19: Conclusion and Next Steps

   [X] COMPLETED / [-] NOT COMPLETED



  #2 | NOTES
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   - Tools used in this course:
     + DASM assembler - https://dasm-assembler.github.io/
     + Stella emulator - https://stella-emu.github.io/
   - Online tools:
     + https://8bitworkshop.com/
     + https://javatari.org/
   - Atari founded in 1972
   - Famous in the beginning for the arcade game "Pong" (1972) (and "Tank")
   - Pong and Tank share some core similarities:
     + Player 1 & Player 2
     + Scoreboard
     + Ball
     + Playing field
     + Collision
   - Atari 2600 Specs:
     + CUP: 1.19 MHz MOS 6507 8-bit Processor (Cheaper version of the 6502) with 4 registers
     + Audio / Video: TIA Custom Chip (Television Interface Adapter)
     + RAM: 128 bytes MOS RIOT 6532 Memory
     + ROM (game cartridge): 4 KB
     + Input: Two controller ports (joystick, paddle, etc.)
     + Output: TV via RCA Connector (NTSC, PAL, SECAM)
   - Atari 2600 models:
     + 1977: 2600 "Heavy Sixer"
     + 1978: 2600 "Light Sixer"
     + 1980: 2600-A "Four-Switch"
     + 1981: 2600 "Dark Vader"
     + 1986: 2600 Jr.
   - The 6502 CPU was very popular and powered (amongst others) the following decives:
     + Apple IIe
     + BBC Micro
     + Commodore PET
     + Commodore VIC-20
     + Commodore 64
     + Tamagotchi
     + Atari 2600 (6507 version of the CPU)
     + NES
     + Bender Rodriguez
   - 6507 was a cheaper version of the 6502 with 28-pins instead of 40
     + A15 to A13 and other interruption lines are not accessible


                               [6502 CPU PINOUT]
                               -----------------
                     VSS-----<|1              40|>-----RES(INV)
                     RDY-----<|2              39|>-----φ2(OUT)
                 φ1(OUT)-----<|3              38|>-----SO
                IRQ(INV)-----<|4              37|>-----φ0(IN)
                      NC-----<|5              36|>-----NC
                NMI(INV)-----<|6              35|>-----NC
                    SYNC-----<|7       M      34|>-----R/W(INV)
                     VCC-----<|8       O      33|>-----D0
                      A0-----<|9       S      32|>-----D1
                      A1-----<|10             31|>-----D2
                      A2-----<|11      6      30|>-----D3
                      A3-----<|12      5      29|>-----D4
                      A4-----<|13      0      28|>-----D5
                      A5-----<|14      2      27|>-----D6
                      A6-----<|15             26|>-----D7
                      A7-----<|16             25|>-----A15
                      A8-----<|17             24|>-----A14
                      A9-----<|18             23|>-----A13
                     A10-----<|19             22|>-----A12
                     A11-----<|20             21|>-----VSS
                               -----------------
                  + A0 - A16: Address bus (16 bits)
                  + D0 - D7:  Data bus (8 bits)


                               [6507 CPU PINOUT]
                               -----------------
                     RES-----<|1              28|>-----φ2
                     VSS-----<|2              27|>-----φ0
                     RDY-----<|3              26|>-----R/W
                     VCC-----<|4       M      25|>-----D0
                      A0-----<|5       O      24|>-----D1
                      A1-----<|6       S      23|>-----D2
                      A2-----<|7              22|>-----D3
                      A3-----<|8       6      21|>-----D4
                      A4-----<|9       5      20|>-----D5
                      A5-----<|10      0      19|>-----D6
                      A6-----<|11      7      18|>-----D7
                      A7-----<|12             17|>-----A12
                      A8-----<|13             16|>-----A11
                      A9-----<|14             15|>-----A10
                               -----------------
                  + A0 - A12: Address bus
                  + D0 - D7:  Data bus (8 bits)

   - Digital Binary System:
     + Base-2 number system
     + Binary data is stored with high / low electricity (RAM), optics (CD ROM), magnetic (HDD)
     + The number of unique values that can be represented with n bits is 2^n
     + Example number: 00011011

       2^7  2^6  2^5  2^4  2^3  2^2  2^1  2^0
        0    0    0    1    1    0    1    1  =  2^0 + 2^1 + 2^2 + 2^3 + 2^4  =  27
         \ MSB: Most significant bit        \ LSB: Least significant bit

   - Hexadecimal Representation:
     + Base-16 number system (0-9 + A-F)
     + 00011011 (binary) = 27 (base-10) = 1B (base-16)
        /   \
     0001    1011
     1(10)  11(10)
     1(16)   B(16)
        \   /
        1B(16)

   - 6502 assembly can use base-2, base-10 or base-16:
     + base-2       (binary): %00011011
     + base-10     (decimal): #27
     + base-16 (hexadecimal): $1B

   - 6507:
     + 28-pin configuration
     + 13 address pins and 8 data pins
     + 6502 & 6507 has Little Endian architecture ()
     + The remaining pins are used for:
       + Power
       + CPU timing clock
       + CPU reset
       + Request bus wait states (RDY pin)
       + Read/write commands to memory from the CPU
     + There is no IRQ or NMI pin on the processor (different from the 6502 (NES, Apple II, etc.))
     + The CPU ticks 1.19 million times per second (each tick is called a clock cycle)
     + 6502 / 6507 contain seven main parts:
       + ALU (airthmetic logic unit): Performs arithmetic operations, can load values from memory (RAM) and the accumulator for the operation and stores the result in the accumulator
       + Six addressable registers:
         + PC: Program Counter - Address of instruction to be executed next (in ROM)
         + SP: Stack Pointer - Points to the address in memory at the top of the stack (in RAM)
         + P: Processor flags - Stores the flags of what happened in the last processor instruction (N O - B D I Z C)
         + X: General purpose (index register)
         + Y: General purpose (index register)
         + Accumulator: General purpose - Used with the ALU
     + Processor status flags:
       + n: negative
       + o: overflow
       + -: not in use
       + b: break instruction
       + d: decimal mode (binary-coded-decimal (BCD))
       + i: irq disable
       + z: zero
       + c: carry

  Negative numbers using two's complement:
 -128's  64's  32's  16's   8's   4's   2's   1's
    |     |     |     |     |     |     |     |
    |     |     |     |     |     |     |     |
    -     -     -     -     -     -     -     -
    0     1     1     1     1     1     1     1  =  [7F]  =  127 
    -     -     -     -     -     -     -     -
    1     0     0     0     0     0     0     0  =  [80]  =  -128
    -     -     -     -     -     -     -     -
    1     1     1     1     1     1     1     1  =  [FF]  =  -1
    -     -     -     -     -     -     -     -

  Overflow flag (overflow to negative):
   0 1 1 1 1 1 1 1  =  [7F]  =  127
 + 0 0 0 0 0 0 0 1  =  [01]  =  1
  -----------------
 = 1 0 0 0 0 0 0 0  =  [80]  =  -128
    \
      \ __ SIGN BIT

  Carry flag:
   [0] 1 1 1 1 1 1 1 1  =  [FF]
 + [0] 0 0 0 0 0 0 0 1  =  [01]
  ---------------------
 = [1] 0 0 0 0 0 0 0 0  =  [00]
     \
       \ __ CARRY FLAG

   - Adressing modes (different modes translates to different Opcodes):
     + LDA #80 ; Immediate mode: Loads the A register with the literal decimal value 80
     + LDA $80 ; Absolute (zero page) mode: Loads the A register with the value inside memory address $80

   - TIA screen objects:
     + Background
     + Playfield
     + Player0
     + Player1
     + Missile0
     + Missile1
     + Ball

  #3 | 6502 INSTRUCTIONS (OPCODES):
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

 - List of 6502 instructions:      
     http://www.6502.org/tutorials/6502opcodes.html

 - List of 6502 instructions (alt link):
     http://www.6502.org/users/obelisk/6502/instructions.html

 - Load and store instructions:
     LDA  ; load the A register
     LDX  ; load the X register
     LDY  ; load the Y register

     STA  ; store the A register
     STX  ; store the X register
     STY  ; store the Y register
 
     ; Loading / storing modes:

     ; Immediate mode:               
     ; LDA #80    Loads the A register with the literal decimal value 80
     
     ; Absolute (zero-page) mode:    
     ; LDA $80    Loads the A register with the value inside memore address $80
     
     ; Immediate mode:               
     ; LDA #$80   Loads the A register with the literal hexadecimal number $80
     
     ; Absolute (zero-page) indexed: 
     ; STA $80,X  Store the value of A into memory address ($80 + X)

     ; Loading sets Zero flag if the loaded number is zero
     ; and Negative flag if the loaded number is negative (the leftmost bit is set)

 - Arithmetic instructions (addition, subtract):
     ADC  ; add to the accumulator (with carry)
     SBC  ; subtract from the accumulator (with carry)

     CLC  ; clear the carry flag (usually performed before addition)
     SEC  ; sets the carry flag (usually performed before subtraction)
 
 - Increment and Decrement instructions:
     INC  ; increment memory by one
     INX  ; increment X by one
     INY  ; increment Y by one
 
     DEC  ; decrement memory by one
     DEX  ; decrement X by one
     DEY  ; decrement Y by one

     ; Flag Z=1 if the result is zero, 0 otherwise
     ; Flag N=1 if bit 7(sign bit) is 1, 0 otherwise
     ; Note: The accumulator has no increment instruction. Use CLC and ADC #1 instead.

 - Logical Instructions:
     AND  ; logical AND
     EOR  ; exclusive OR
     ORA  ; logical inclusive OR
     BIT  ; bit test

     ; AND: The result of a logical AND is only true if both inputs are true.
     ;      A bitwise AND can be used to mask certain bits of a byte.
     ; EOR: An Exclusive-OR is similar to logical OR, with the exception that
     ;     it is false when both inputs are true.
     ; ORA: The result of a logical OR (ORA) is true if at least
     ;      one of the inputs are true.

     ; AND can be used to mask bits
     ; Example:
     ; STA #%00001111
     ; AND #%01010101
     ; The result is 00000101

     ; AND can also be used to check for even/odd numbers, and to check
     ; if a number is divisible by 2/4/8/16/32/64
     ; Examples:
     ; AND #%00000001 - Can be used to mask all but the rightmost bit, if the
     ; result is true it means the original number is an
     ; even number and divisible by two.
     ; AND #%00000011 - Can be used to mask all but the two rightmost bits, if the
     ; result is true it means the original number is divisible by four.
     ; AND #%00000111 - If the result is true the original number is 
     ; divisible by eight
     ; AND #%00001111 - Divisible by 16
     ; et cetera...

     ; EOR can be used to flip bits
     ; Example:
     ; STA #%00000110
     ; EOR #%00000011
     ; The result is 00000101

     ; ORA can be used to set a particular bit to true
     ; Example:
     ; STA #%00011100
     ; ORA #%00000111
     ; The result is 00011111

     ; ORA + EOR can be used to set a partical bit to false
     ; Example:
     ; STA #%11101011
     ; ORA #%00111100
     ; EOR #%00111100
     ; The result is 11000011

 - Jump, Branch, Compare Instructions:
     JMP  ; jump to another location     GOTO

     BCC  ; branch on carry clear        C == 0
     BCS  ; branch on carry set          C == 1
     BEQ  ; branch on equal to zero      Z == 1
     BNE  ; branch on not equal to zero  Z == 0
     BMI  ; branch on minus              N == 1
     BPL  ; branch on plus               N == 0
     BVC  ; branch on overflow clear     V == 0
     BVS  ; branch on overflow set       V == 1
     
     CMP  ; compare accumulator
     CPX  ; compare X register
     CPY  ; compare Y register

     ; Relative vs. Absolute Jumps:
     ; JMP is an absolute jump and can jump to anywhere.
     ; Branching (BEQ, BMI, BCS, etc.) is a relative jump that uses a byte 
     ; to define the relative target position.
     ; It can maximum jump 127 lines up or down.
     ; To use branch instructions with absolute jump we'll nest a JMP
     ; instruction inside a branch.
     ; Example, here's the original code:
     ;   BNE JumpDestination
     ; To replace it with an absolute jump we'll change it to:
     ;   BEQ :+
     ;     JMP JumpDestination
     ;   :

     ; The CMP instruction is used to compare a value from memory with the one 
     ; in the accumulator. It sets the N(egative), Z(ero) and C(arry) flags
     ; depending on the result of the comparison:
     ; 
     ;   CMP Value:    N Z C
     ;   If A < Value  - 0 0
     ;   If A = Value  0 1 1
     ;   If A > Value  - 0 1

 - Shift and Rotate Instructions:
     ASL  ; arithmetic shift left
     LSR  ; logical shift right
     ROL  ; rotate left
     ROR  ; rotate right

     ; LSR: Logical Shift Right, moves all bits one step to the right.
     ;      Inserting a 0 in the leftmost bit and moving the rightmost bit
     ;      to the carry flag.
     ;      1 0 1 0 1 1 1 1 -> [1] 0 1 0 1 0 1 1 1
     ; ASL: Logical Shift Left, same as LSR but moving bits one step to the left.
     ;      Inserting a 0 in the rightmost bit and moving the leftmost bit
     ;      to the carry flag.
     ;      1 0 1 0 1 1 1 1 -> [1] 0 1 0 1 1 1 1 0
     ; ROR: Rotate Right, moves all the bits one step right.
     ;      The rightmost bit moves over to the leftmost side.
     ;      1 0 1 0 1 1 1 1 -> 1 1 0 1 0 1 1 1
     ; ROL: Rotate Left, moves all the bits one step left.
     ;      The leftmost bit moves over to the rightmost side.
     ;      1 0 1 0 1 1 1 1 -> 0 1 0 1 1 1 1 1

     ; Multiplication and division by 2,4,6,8,16 etc. can by done with bit shifting
     ; (ASL) Shifting left is equivalent to multiplying by 2.
     ; Example: (27) 00011011 * 2 = (54) 00110110
     ; (LSR) Shifting right is equivalent to dividing by 2.
     ; Example: (74) 01001010 / 2 = (37) 00100101

 - Transfer Instructions:
     TAX  ; transfer A to X
     TAY  ; transfer A to Y
     TXA  ; transfer X to A
     TYA  ; transfer Y to A

 - Stack Instructions:
     TSX  ; transfer stack pointer to X
     TXS  ; transfer X to stack pointer
     PHA  ; push accumulator on stack
     PHP  ; push processor status on stack
     PLA  ; pull accumulator from stack
     PLP  ; pull processor status from stack

 - Subroutine Instructions:
     JSR  ; jump to a subroutine
     RTS  ; return from a subroutine

 - Set/Reset Instructions:
     CLD  ; clear decimal mode flag
     CLI  ; clear interrupt disable flag
     CLV  ; clear overflow flag 
     SEI  ; set interrupt disable flag
     RTI  ; return from interrupt

     ; It is customary to add a CLD (clear decimal mode flag) instruction
     ; during initialization since the NES does not support the decimal flag.

 - NOP/BRK Instructions:
     BRK  ; force an interrupt
     NOP  ; no operation

